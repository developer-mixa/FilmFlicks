// <auto-generated />
using System;
using FilmFlicks.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FilmFlicks.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250108165112_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FilmFlicks.Domain.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("ApartmentNumber")
                        .HasColumnType("integer")
                        .HasColumnName("apartment_number");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("city_name");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("integer")
                        .HasColumnName("house_number");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("street_name");

                    b.HasKey("Id");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("FilmFlicks.Domain.Entities.Cinema", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("cinemas");
                });

            modelBuilder.Entity("FilmFlicks.Domain.Entities.Film", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("name");

                    b.Property<float>("Rating")
                        .HasColumnType("real")
                        .HasColumnName("rating");

                    b.HasKey("Id");

                    b.ToTable("films");
                });

            modelBuilder.Entity("FilmFlicks.Domain.Entities.FilmCinema", b =>
                {
                    b.Property<long>("CinemaId")
                        .HasColumnType("bigint")
                        .HasColumnName("cinema_id");

                    b.Property<long>("FilmId")
                        .HasColumnType("bigint")
                        .HasColumnName("film_id");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.HasKey("CinemaId", "FilmId");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmCinemas");
                });

            modelBuilder.Entity("FilmFlicks.Domain.Entities.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("FilmCinemaCinemaId")
                        .HasColumnType("bigint");

                    b.Property<long>("FilmCinemaFilmId")
                        .HasColumnType("bigint");

                    b.Property<long>("FilmCinemaId")
                        .HasColumnType("bigint")
                        .HasColumnName("film_cinema_id");

                    b.Property<DateTime>("FilmTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("film_time");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("place");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("FilmCinemaCinemaId", "FilmCinemaFilmId");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("FilmFlicks.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("FilmFlicks.Domain.Entities.Cinema", b =>
                {
                    b.HasOne("FilmFlicks.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("FilmFlicks.Domain.Entities.FilmCinema", b =>
                {
                    b.HasOne("FilmFlicks.Domain.Entities.Cinema", "Cinema")
                        .WithMany("FilmCinemas")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmFlicks.Domain.Entities.Film", "Film")
                        .WithMany("FilmCinemas")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("FilmFlicks.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("FilmFlicks.Domain.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("FilmFlicks.Domain.Entities.Ticket", "UserId");

                    b.HasOne("FilmFlicks.Domain.Entities.FilmCinema", "FilmCinema")
                        .WithMany("Tickets")
                        .HasForeignKey("FilmCinemaCinemaId", "FilmCinemaFilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilmCinema");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmFlicks.Domain.Entities.Cinema", b =>
                {
                    b.Navigation("FilmCinemas");
                });

            modelBuilder.Entity("FilmFlicks.Domain.Entities.Film", b =>
                {
                    b.Navigation("FilmCinemas");
                });

            modelBuilder.Entity("FilmFlicks.Domain.Entities.FilmCinema", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
